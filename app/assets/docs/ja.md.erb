Timesyのドキュメントへようこそ。ここでは、Markdownエディターの使い方やガイドラインなどについて紹介しています。Timesyを使ってみて分からないところがあったら、ぜひご一読ください。また、修正箇所を見つけたら、[GitHub](https://github.co/moekidev/timesy)のIssueやPRを送っていただけると嬉しいです。

## Markdownエディターの使い方

### Markdown記法
Timesyは[Github Flavor Markdown](https://guides.github.com/features/mastering-markdown/)をベースに実装されていますがいくつかの点で異なります。

#### 見出し
Timesyでは、見出しのレベルはh1からh6までの6段階になっています。見出しのレベルは、見出しの行の先頭に`#`を記述することで指定できます。`#`の数が多いほどレベルが低くなります。

```markdown
# h1
## h2
### h3
#### h4
##### h5
###### h6
```

# h1
## h2
### h3
#### h4
##### h5
###### h6

#### テキストのスタイル

太字、斜体、取り消し線を指定することができます。

| スタイル | 記法 |  例 | 出力 |
| --- | --- | --- | --- |
| 太字 | `** **`  | `**太字**` | **太字** |
| 斜体 | `* *`  | `*斜体*` | *斜体* |
| 取り消し線 | `~~ ~~` |  `~~取り消し線~~` | ~~取り消し線~~ |

#### テキストの引用
`>`を利用してテキストを引用することができます。

```markdown
以下のように記述します。
> 引用
```

以下のように記述します。
> 引用


### コードテキスト
Timesyでは、コードテキストを記述することができます。コードテキストは、バッククオートで囲むことで記述できます。


```markdown
`コードテキスト`
```

`コードテキスト`

### コードブロック
Timesyでは、コードブロックを記述することができます。コードブロックは、バッククオート3つで囲むことで記述できます。また、コードブロックの前に言語を指定することで、シンタックスハイライトを行うことができます。

### リンク
インラインリンクを記述することができます。リンクのテキストとURLを`[]()`で囲むことで記述できます。

```markdown
[Timesy](https://www.timesy.dev)
```

[Timesy](https://www.timesy.dev)

### 画像

Timesyでは、画像を記述することができます。画像のテキストとURLを`![]()`で囲むことで記述できます。

```markdown
![Timesy](https://www.timesy.dev/ogp.png)
```

![Timesy](https://www.timesy.dev/ogp.png)

また、Markdownエディターへファイルをドラッグ&ドロップすることで画像を挿入することができます。

#### 対応している画像ファイル形式

- PNG
- JPEG
- SVG
- GIF
- WebP

### リスト
1つ以上の行をインデントすることで、リストを記述することができます。また、リストの項目は、`*`、`+`、`-`のいずれかで記述することができます。

```markdown
- リスト1
- リスト2
- リスト3
```

- リスト1
- リスト2
- リスト3

また、数字を利用して、順序付きリストを記述することができます。

```markdown
1. リスト1
2. リスト2
3. リスト3
```

1. リスト1
2. リスト2
3. リスト3

さらに、入れ子にすることもできます。

```markdown
1. リスト1
    1. リスト1-1
    2. リスト1-2
2. リスト2
    1. リスト2-1
    2. リスト2-2
```

### タブ
Timesyではタブを2つのスペースとして扱われます。Tabキーを押すと、2つのスペースが挿入されます。

### [NEW] プロジェクトタグ
Timesyでは、プロジェクトタグを記述することができます。プロジェクトタグは、`#`で記述することができます。
これを記述するとプロジェクトと投稿が紐付けられ、リンクが自動で生成されます。

```markdown
#timesy
```


### コードブロックで対応している言語
Timesyでは、コードブロックで以下の言語に対応しています。

- Bash
- C
- C#
- C++
- CSS
- Diff
- Go
- GraphQL
- HTML
- XML
- JSON
- Java
- JavaScript
- Kotlin
- Less
- Lua
- Makefile
- Markdown
- Objective-C
- PHP
- PHP Template
- Perl
- Plain text
- Python
- Python REPL
- R
- Ruby
- Rust
- SCSS
- SQL
- Shell
- Session
- Swift
- TOML
- TypeScript
- Visual Basic
- .NET
- WebAssembly
- YAML

### キーボードショートカット
| Windows | Mac | 記述 |
:--- | :--- | :---
Ctrl - Shift - P | Cmd - Shift - P | プレビュー
Ctrl - B | Cmd - B | 太字
Ctrl - H | Cmd - H | 見出しを小さくする
Ctrl - I | Cmd - I | イタリック
Ctrl - K | Cmd - K | リンク
Ctrl - L | Cmd - L | リスト
Ctrl - Alt - C | Cmd - Alt - C | コードブロック
Ctrl - Alt - I | Cmd - Alt - I | 画像
Ctrl - Alt - L | Cmd - Alt - L | 順序付きリスト
Shift - Ctrl - H | Shift - Cmd - H | 見出しを大きくする
Ctrl - Alt - 1 | Cmd - Alt - 1 | 見出し1
Ctrl - Alt - 2 | Cmd - Alt - 2 | 見出し2
Ctrl - Alt - 3 | Cmd - Alt - 3 | 見出し3
Ctrl - Alt - 4 | Cmd - Alt - 4 | 見出し4
Ctrl - Alt - 5 | Cmd - Alt - 5 | 見出し5
Ctrl - Alt - 6 | Cmd - Alt - 6 | 見出し6

## プロジェクトの使い方
### プロジェクトとは
Timesyではプロジェクトを作成できます。これは、あなたが今取り組んでいるサービスやプロダクト、サイトなどを管理するために利用できます。プロジェクトは、「プロジェクトタグ」を利用して投稿やコメントから参照することができます。

これによって、あなたの投稿の背景やコンテキストを明確にすることができます。

### プロジェクトの作成

以下の手順でプロジェクトを作成できます。

1. プロフィールメニューの「プロジェクト」をクリックします
2. 「プロジェクトを作成」をクリックします
3. プロジェクトの情報を入力して作成します。

### プロジェクトの参照

投稿の本文から`#codename`で参照してください。

ex) `#timesy`

```
project #timesy
```

## REST API
Timesyでは、REST APIを提供しています。

### 認証
設定画面からアクセストークンを生成して、リクエストヘッダーに`Authorization: Bearer {アクセストークン}`を付与してください。
アクセストークンは再生成することができます。

```bash
curl -X POST \
  -H "Authorization: Bearer {アクセストークン}" \
  -H "Content-Type: application/json" \
  -d '{ "body": "test" }' \
  https://www.timesy.dev/api/v1/posts
```

### 投稿
#### 投稿する
##### 本文のパラメーター

- `body` - 本文

##### 例

```bash
curl -X POST \
  -H "Authorization: Bearer {アクセストークン}" \
  -H "Content-Type: application/json" \
  -d '{ "body": "test" }' \
  https://www.timesy.dev/api/v1/posts
```

### 投稿を更新する
#### パスパラメーター

- `id` - 投稿ID

#### 本文のパラメーター

- `body` - 本文

##### 例

```bash
curl -X PATCH \
  -H "Authorization: Bearer {アクセストークン}" \
  -H "Content-Type: application/json" \
  -d '{ "body": "test" }' \
  https://www.timesy.dev/api/v1/posts/{id}
```

### 投稿を削除する
#### パスパラメーター

- `id` - 投稿ID

##### 例

```bash
curl -X DELETE \
  -H "Authorization: Bearer {アクセストークン}" \
  https://www.timesy.dev/api/v1/posts/{id}
```

### コメント
#### コメントする
##### パスパラメーター

- `postId` - 投稿ID

##### 本文のパラメーター

- `body` - 本文

##### 例

```bash
curl -X POST \
  -H "Authorization: Bearer {アクセストークン}" \
  -H "Content-Type: application/json" \
  -d '{ "body": "test" }' \
  https://www.timesy.dev/api/v1/posts/{postId}/comments
```

### コメントを更新する
#### パスパラメーター

- `postId` - 投稿ID
- `id` - コメントID

#### 本文のパラメーター

- `body` - 本文

##### 例

```bash
curl -X PATCH \
  -H "Authorization: Bearer {アクセストークン}" \
  -H "Content-Type: application/json" \
  -d '{ "body": "test" }' \
  https://www.timesy.dev/api/v1/posts/{postId}/comments/{id}
```

### コメントを削除する
#### パスパラメーター

- `postId` - 投稿ID
- `id` - コメントID

##### 例

```bash
curl -X DELETE \
  -H "Authorization: Bearer {アクセストークン}" \
  https://www.timesy.dev/api/v1/posts/{postId}/comments/{id}
```

### プロジェクト
#### 作成する
##### 本文のパラメーター

- `title` - プロジェクト名
- `codename` - プロジェクトタグ
- `link` - プロジェクトのリンク
- `body` - 本文

##### 例

```bash
curl -X POST \
  -H "Authorization: Bearer {アクセストークン}" \
  -H "Content-Type: application/json" \
  -d '{ "title": "test", codename: "test", "link": "https://example.com", body: "Hello!" }' \
  https://www.timesy.dev/api/v1/posts
```

### 更新する
#### パスパラメーター

- `id` - プロジェクトID

#### 本文のパラメーター

- `title` - プロジェクト名
- `codename` - プロジェクトタグ
- `link` - プロジェクトのリンク
- `body` - 本文

##### 例

```bash
curl -X PATCH \
  -H "Authorization: Bearer {アクセストークン}" \
  -H "Content-Type: application/json" \
  -d '{ "body": "test" }' \
  https://www.timesy.dev/api/v1/projects/{id}
```

### プロジェクトを削除する
#### パスパラメーター

- `id` - プロジェクトID

##### 例

```bash
curl -X DELETE \
  -H "Authorization: Bearer {アクセストークン}" \
  https://www.timesy.dev/api/v1/projects/{id}
```
